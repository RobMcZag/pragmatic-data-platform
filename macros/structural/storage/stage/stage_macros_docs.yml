version: 2

macros:
  - name: stage
    description: | 
      The macro to build a STAGE model (prefix STG) from metadata passed as YAML.

      While only the `source_model` is mandatory, the macro will need at least the 
      `source` or `calculated_columns` arguments to provide some columns to return.
      
      Most probably you would want to also include the `hashed_columns` argument if you 
      want to also create some columns by hashing together some other columns.
    arguments:
      - name: source_model
        type: Relation or string
        description: |
          The source to read from.
          It can be a dbt Relation that is expanded based on the user and environment, or 
          a string with a table name (qualified enough to work) or a CTE name from the same model.
      - name: source
        type: dictionary
        description: |
          The definition of what columns to uses from the source and what filters to apply.
          This is useful if most column are to be left untouched and only few need renaming or replacement, 
          while when many columns need changes it is easier and clearer to redefine all columns by including 
          them all in the `calculated_columns` argument.
          The `source` argument is optional if you are passing the `calculated_columns` argument.

          An example `source` argument might look like this:
                source:
                    columns: 
                        include_all: false  
                        exclude_columns: 
                          - c1 
                          - c2
                        replace_columns: 
                          - c1: upper(c1)
                        rename_columns:
                          - renamed_c1: c1
                    where: "Column1 != 'xxx'"
          The columns to include are defined under the `columns` attribute, that has the following sub-attributes:
          - include_all: True or False
            True places a `*` after SELECT and enables using exclude / replace / rename lists, as shown below and in the example,
            while False does not include any source column and the exclude / replace / rename lists are not used.
            False is the common choice when we use the `calculated_columns` argument to define all the column that we want.
          - exclude_columns: a list of column names to be excluded.
          - replace_columns: a dictionary with column names as keys and the SQL expression for them as values.
          - rename_columns: a dictionary with the new column names as keys and the old column names as values.
          
          The filters are provided with the `where` attribute, that is a string with all the desired filters to apply.

      - name: calculated_columns
        type: list of dictionaries
        description: |
          The definition of manually defined columns.
          This can complement the `source` argument by adding newly created columns to the ones from the source 
          or be used to define all the columns that we want to have in the resulting query.

          The following is an example of 
                calculated_columns:
                  - COLUMN_A                    # Column left unchanged (no need to pass a value)
                  - COLUMN_1: Column1           # Column being defined by renaming another column
                  - COLUMN_2: UPPER(Column2)    # Column being defined by an SQL expression

          Each column to be returned is defined by a key:value pair rendered as "{{value}} as {{key}}",
          that is with the key representing the new column name and the optional value as its definition.
          If no value is passed, then only the key is printed, bringing on the unchanged column.

          This format is very flexible as each item in the list can be a dictionary with one or more column definitions,
          so it is possible to use the YAML `<<` merge key to include the mappings from another definition and 
          override it with the local definitions (see the `TEST_STAGE__EXTERNAL_CONFIG_LOCALLY_EXTENDED` model as an example).

      - name: hashed_columns
        type: list of dictionaries
        description: |
          The definition of the hashed columns to add to the model.
          There can be as many hashed columns as needed.

          The definition of a single hash column looks like the following
              hashed_columns: 
                  - SOME_HKEY:
                      - COLUMN_1
                      - COLUMN_2
          Each element of the list is a dictionary with the key (SOME_HKEY) representing the new hashed column name
          and the value being the list of the columns to be hashed (COLUMN_1 and COLUMN_2).

      - name: default_records
        type: list of dictionaries
        description: |
          The definition of one or more default records.
          Each default record is defined by a top level entry in the list in form of a dictionary.
          The key of the dictionary represents the name of the default record, 
          while the value must be a list of dictionaries defining ONLY the desired colums in the same format 
          shown to pass the `calculated_columns`, that for each column is `COLUMN_NAME: SQL_EXPRESSION`.
      - name: remove_duplicates
        type: object
        description: |
          The definition of how to filter the rows provided by the stage model.
          The filtering is performed as a QUALIFY predicate using a window function.

  - name: hash_columns_sql
    description: The macro that takes the hashed column specification and builds the SQL to calculate them.
    arguments:
      - name: hashed_columns
        type: list of dictionaries
        description: |
          The definition of the hashed columns to add to the model.
          For more details see the `hashed_columns` argument under the `stage` macro.
